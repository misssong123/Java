递归调用的规则
1.当程序执行到一个方法时，就会开辟一个独立的空间栈
2.每个空间的数据（局部变量），是独立的
3.如果方法中使用的是引用类型变量，就会共享应用类型的数据
4.递归必须向递归条件逼近，否则就是无限递归
5.当一个方法执行完毕，活着遇见return就会返回，遵守谁调用，就将结果
返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕

判断二元数组中的两个元素是否在一条斜线上
例如(i,j),(m,n)
Math.abs(i-m)==Math.abs(j-n)

时间频度:一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，
它花费时间就多。一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)
时间复杂度

一般情况下，算法中的基本操作语句的重复执行次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n趋近于无穷大时，T(n) / f(n) 的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作 T(n)=Ｏ( f(n) )，称Ｏ( f(n) )  为算法的渐进时间复杂度，简称时间复杂度。

T(n) 不同，但时间复杂度可能相同。 如：T(n)=n²+7n+6 与 T(n)=3n²+2n+2 它们的T(n) 不同，但时间复杂度相同，都为O(n²)。
计算时间复杂度的方法：

用常数1代替运行时间中的所有加法常数  T(n)=n²+7n+6  => T(n)=n²+7n+1
修改后的运行次数函数中，只保留最高阶项  T(n)=n²+7n+1 => T(n) = n²
去除最高阶项的系数 T(n) = n² => T(n) = n² => O(n²)

常见的时间复杂度

常数阶O(1):
无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就都是O(1)
对数阶O(log2n)
while(i<n){i=i*2}类似于这一种
线性阶O(n)
for（int i=0;i<n;i++）{j++;}类似于这一种
线性对数阶O(nlog2n)
for（int i=0;i<n;i++）{while(j<n){j=i*2}}类似于这一种
平方阶O(n^2)
for（int i=0;i<n;i++）{for（int i=0;i<n;i++）j++}
立方阶O(n^3)
类似于平方阶
k次方阶O(n^k)
类似于平方阶
指数阶O(2^n)
